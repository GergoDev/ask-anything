{"ast":null,"code":"var _jsxFileName = \"/Users/gergoferenczi/Documents/Kinsta/project/frontend/src/components/routes/Question.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport Breadcrumb from '../Breadcrumb';\nimport Answers from '../Answers/Answers';\nimport { Card, Row, Col, Modal, message } from 'antd';\nimport { LikeFilled, ExclamationCircleOutlined } from '@ant-design/icons';\nimport IconBar from '../IconBar';\nimport EditQuestion from '../EditQuestion';\nimport { gql, useQuery, useMutation } from '@apollo/client';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  confirm\n} = Modal;\nconst FEED_QUESTION_QUERY = gql`\nquery feedQuestionQuery($id: ID!) {\n    feedQuestion(id: $id) {\n        title\n        message\n        submissionTime\n        view\n        voteCount\n        answers {\n            id\n            key\n            author\n            content\n            avatar\n            datetime\n        }\n        user {\n            name\n        }\n    }\n}\n`;\nconst UPDATE_QUESTION_MUTATION = gql`\nmutation updateQuestionMutation(\n    $id: ID!\n    $title: String!\n    $message: String!) {\n    updateQuestion(id: $id, title: $title, message: $message) {\n        title\n        message\n    }\n}\n`;\nconst DELETE_QUESTION_MUTATION = gql`\nmutation deleteQuestionMutation($id: ID!){\n    deleteQuestion(id: $id) {\n      id\n    }\n  }\n`;\nconst ADD_VIEW_MUTATION = gql`\nmutation addViewMutation($questionId: ID!){\n    addView(questionId: $questionId) {\n        view\n    }\n}\n`;\nconst VOTE_MUTATION = gql`\nmutation voteMutation($questionId: ID!){\n    vote(questionId: $questionId) {\n        id\n        question {\n            voteCount\n        }\n    }\n}\n`;\n\nconst Question = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [question, setQuestion] = useState();\n  const [edit, setEdit] = useState(false);\n  const history = useHistory();\n  const viewCounted = useRef(false);\n  useQuery(FEED_QUESTION_QUERY, {\n    variables: {\n      id: parseInt(id)\n    },\n    onCompleted: res => {\n      setQuestion(res.feedQuestion);\n    }\n  });\n  const [updateQuestion] = useMutation(UPDATE_QUESTION_MUTATION, {\n    onCompleted: res => {\n      setQuestion({ ...question,\n        ...res.updateQuestion\n      });\n      setEdit(false);\n    }\n  });\n\n  const editHandler = values => {\n    updateQuestion({\n      variables: {\n        id: id,\n        title: values.title,\n        message: values.message\n      }\n    });\n  };\n\n  const [deleteQuestion] = useMutation(DELETE_QUESTION_MUTATION, {\n    onCompleted: () => history.push('/')\n  });\n\n  const deleteHandler = () => {\n    deleteQuestion({\n      variables: {\n        id: id\n      }\n    });\n  };\n\n  function showDeleteConfirm() {\n    confirm({\n      title: 'Delete this question?',\n      icon: /*#__PURE__*/_jsxDEV(ExclamationCircleOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this),\n      content: 'Are you sure you want to delete this question?',\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n\n      onOk() {\n        deleteHandler();\n      },\n\n      onCancel() {\n        console.log('Cancel');\n      }\n\n    });\n  }\n\n  const [addViewMutation] = useMutation(ADD_VIEW_MUTATION, {\n    variables: {\n      questionId: id\n    },\n    onCompleted: res => setQuestion({ ...question,\n      ...res.addView\n    })\n  });\n  useEffect(() => {\n    if (!viewCounted.current) {\n      addViewMutation();\n      viewCounted.current = true;\n    } else {\n      viewCounted.current = false;\n    }\n  }, [addViewMutation]);\n  const [voteMutation] = useMutation(VOTE_MUTATION, {\n    variables: {\n      questionId: Number(id)\n    },\n    onCompleted: res => setQuestion({ ...question,\n      ...res.vote.question\n    }),\n    onError: err => message.error(err.message)\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n      locationArray: ['Home', 'Question', question ? question.title : '']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"site-layout-content\",\n      children: question && /*#__PURE__*/_jsxDEV(Card, {\n        title: question.title,\n        className: \"question-card\",\n        extra: /*#__PURE__*/_jsxDEV(IconBar, {\n          className: \"question-icon-bar\",\n          editHandler: () => setEdit(true),\n          deleteHandler: showDeleteConfirm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 40\n        }, this),\n        children: [edit && /*#__PURE__*/_jsxDEV(EditQuestion, {\n          question: question,\n          editHandler: editHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 30\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          gutter: 16,\n          className: \"details\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            span: 6,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              size: \"small\",\n              title: \"Submitted at\",\n              bordered: true,\n              children: moment(question.submissionTime, \"x\").fromNow()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 6,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              size: \"small\",\n              title: \"Author\",\n              bordered: true,\n              children: question.user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 6,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              size: \"small\",\n              title: \"Views\",\n              bordered: true,\n              children: question.view\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 6,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              size: \"small\",\n              title: \"Votes\",\n              bordered: true,\n              extra: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"like-link\",\n                onClick: () => voteMutation(),\n                children: [/*#__PURE__*/_jsxDEV(LikeFilled, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 99\n                }, this), \"LIKE\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 40\n              }, this),\n              children: question.voteCount && question.voteCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          className: \"question-message\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: question.message.replace(/(\\r\\n|\\n\\r|\\r|\\n)/g, '<br>')\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Answers, {\n          questionId: id,\n          answersProp: question.answers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 30\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Question, \"j8gR5rwQAbIu/PiV7g+BcecKuEo=\", false, function () {\n  return [useParams, useHistory, useQuery, useMutation, useMutation, useMutation, useMutation];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/gergoferenczi/Documents/Kinsta/project/frontend/src/components/routes/Question.tsx"],"names":["useState","useEffect","useRef","useParams","useHistory","Breadcrumb","Answers","Card","Row","Col","Modal","message","LikeFilled","ExclamationCircleOutlined","IconBar","EditQuestion","gql","useQuery","useMutation","moment","confirm","FEED_QUESTION_QUERY","UPDATE_QUESTION_MUTATION","DELETE_QUESTION_MUTATION","ADD_VIEW_MUTATION","VOTE_MUTATION","Question","id","question","setQuestion","edit","setEdit","history","viewCounted","variables","parseInt","onCompleted","res","feedQuestion","updateQuestion","editHandler","values","title","deleteQuestion","push","deleteHandler","showDeleteConfirm","icon","content","okText","okType","cancelText","onOk","onCancel","console","log","addViewMutation","questionId","addView","current","voteMutation","Number","vote","onError","err","error","submissionTime","fromNow","user","name","view","voteCount","__html","replace","answers"],"mappings":";;;AAAA,SAAaA,QAAb,EAAuBC,SAAvB,EAAkCC,MAAlC,QAAgD,OAAhD;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,kBAAtC;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,OAAhC,QAA+C,MAA/C;AACA,SAASC,UAAT,EAAqBC,yBAArB,QAAsD,mBAAtD;AAEA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,WAAxB,QAA2C,gBAA3C;AACA,OAAOC,MAAP,MAAmB,QAAnB;;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAcV,KAApB;AAEA,MAAMW,mBAAmB,GAAGL,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArBA;AAuBA,MAAMM,wBAAwB,GAAGN,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;AAYA,MAAMO,wBAAwB,GAAGP,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA,CANA;AAQA,MAAMQ,iBAAiB,GAAGR,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA,CANA;AAQA,MAAMS,aAAa,GAAGT,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;;AAWA,MAAMU,QAAY,GAAG,MAAM;AAAA;;AACvB,QAAM;AAACC,IAAAA;AAAD,MAAqBxB,SAAS,EAApC;AACA,QAAM,CAACyB,QAAD,EAAWC,WAAX,IAA0B7B,QAAQ,EAAxC;AACA,QAAM,CAAC8B,IAAD,EAAOC,OAAP,IAAkB/B,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAMgC,OAAO,GAAG5B,UAAU,EAA1B;AACA,QAAM6B,WAAW,GAAG/B,MAAM,CAAC,KAAD,CAA1B;AAEAe,EAAAA,QAAQ,CAACI,mBAAD,EAAsB;AAC1Ba,IAAAA,SAAS,EAAE;AAAEP,MAAAA,EAAE,EAAEQ,QAAQ,CAACR,EAAD;AAAd,KADe;AAE1BS,IAAAA,WAAW,EAAGC,GAAD,IAAS;AAClBR,MAAAA,WAAW,CAACQ,GAAG,CAACC,YAAL,CAAX;AACH;AAJyB,GAAtB,CAAR;AAOA,QAAM,CAACC,cAAD,IAAmBrB,WAAW,CAACI,wBAAD,EAA2B;AAC3Dc,IAAAA,WAAW,EAAGC,GAAD,IAAS;AAClBR,MAAAA,WAAW,CAAC,EAAC,GAAGD,QAAJ;AAAc,WAAGS,GAAG,CAACE;AAArB,OAAD,CAAX;AACAR,MAAAA,OAAO,CAAC,KAAD,CAAP;AACH;AAJ0D,GAA3B,CAApC;;AAOA,QAAMS,WAAW,GAAIC,MAAD,IAAiB;AACjCF,IAAAA,cAAc,CAAC;AAAEL,MAAAA,SAAS,EAAE;AACxBP,QAAAA,EAAE,EAAEA,EADoB;AAExBe,QAAAA,KAAK,EAAED,MAAM,CAACC,KAFU;AAGxB/B,QAAAA,OAAO,EAAE8B,MAAM,CAAC9B;AAHQ;AAAb,KAAD,CAAd;AAKH,GAND;;AAQA,QAAM,CAACgC,cAAD,IAAmBzB,WAAW,CAACK,wBAAD,EAA2B;AAC3Da,IAAAA,WAAW,EAAE,MAAMJ,OAAO,CAACY,IAAR,CAAa,GAAb;AADwC,GAA3B,CAApC;;AAIA,QAAMC,aAAa,GAAG,MAAM;AACxBF,IAAAA,cAAc,CAAC;AAAET,MAAAA,SAAS,EAAE;AAAEP,QAAAA,EAAE,EAAEA;AAAN;AAAb,KAAD,CAAd;AACH,GAFD;;AAIA,WAASmB,iBAAT,GAA6B;AACzB1B,IAAAA,OAAO,CAAC;AACNsB,MAAAA,KAAK,EAAE,uBADD;AAENK,MAAAA,IAAI,eAAE,QAAC,yBAAD;AAAA;AAAA;AAAA;AAAA,cAFA;AAGNC,MAAAA,OAAO,EAAE,gDAHH;AAINC,MAAAA,MAAM,EAAE,KAJF;AAKNC,MAAAA,MAAM,EAAE,QALF;AAMNC,MAAAA,UAAU,EAAE,IANN;;AAONC,MAAAA,IAAI,GAAG;AACLP,QAAAA,aAAa;AACd,OATK;;AAUNQ,MAAAA,QAAQ,GAAG;AACTC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD;;AAZK,KAAD,CAAP;AAcD;;AAEH,QAAM,CAACC,eAAD,IAAoBtC,WAAW,CAACM,iBAAD,EAAoB;AACrDU,IAAAA,SAAS,EAAE;AAAEuB,MAAAA,UAAU,EAAE9B;AAAd,KAD0C;AAErDS,IAAAA,WAAW,EAAGC,GAAD,IAASR,WAAW,CAAC,EAAC,GAAGD,QAAJ;AAAc,SAAGS,GAAG,CAACqB;AAArB,KAAD;AAFoB,GAApB,CAArC;AAKAzD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,CAACgC,WAAW,CAAC0B,OAAhB,EAAyB;AACrBH,MAAAA,eAAe;AACfvB,MAAAA,WAAW,CAAC0B,OAAZ,GAAsB,IAAtB;AACH,KAHD,MAGO;AACH1B,MAAAA,WAAW,CAAC0B,OAAZ,GAAsB,KAAtB;AACH;AACJ,GAPQ,EAON,CAACH,eAAD,CAPM,CAAT;AASA,QAAM,CAACI,YAAD,IAAiB1C,WAAW,CAACO,aAAD,EAAgB;AAC9CS,IAAAA,SAAS,EAAE;AAAEuB,MAAAA,UAAU,EAAEI,MAAM,CAAClC,EAAD;AAApB,KADmC;AAE9CS,IAAAA,WAAW,EAAGC,GAAD,IAASR,WAAW,CAAC,EAAC,GAAGD,QAAJ;AAAc,SAAGS,GAAG,CAACyB,IAAJ,CAASlC;AAA1B,KAAD,CAFa;AAG9CmC,IAAAA,OAAO,EAAGC,GAAD,IAASrD,OAAO,CAACsD,KAAR,CAAcD,GAAG,CAACrD,OAAlB;AAH4B,GAAhB,CAAlC;AAMA,sBACI;AAAA,4BACI,QAAC,UAAD;AAAY,MAAA,aAAa,EAAE,CAAC,MAAD,EAAS,UAAT,EAAqBiB,QAAQ,GAAGA,QAAQ,CAACc,KAAZ,GAAoB,EAAjD;AAA3B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,gBACKd,QAAQ,iBAAI,QAAC,IAAD;AACG,QAAA,KAAK,EAAEA,QAAQ,CAACc,KADnB;AAEG,QAAA,SAAS,EAAC,eAFb;AAGG,QAAA,KAAK,eAAE,QAAC,OAAD;AACK,UAAA,SAAS,EAAC,mBADf;AAEK,UAAA,WAAW,EAAE,MAAMX,OAAO,CAAC,IAAD,CAF/B;AAGK,UAAA,aAAa,EAAEe;AAHpB;AAAA;AAAA;AAAA;AAAA,gBAHV;AAAA,mBAORhB,IAAI,iBAAI,QAAC,YAAD;AAAc,UAAA,QAAQ,EAAEF,QAAxB;AAAkC,UAAA,WAAW,EAAEY;AAA/C;AAAA;AAAA;AAAA;AAAA,gBAPA,eAQT,QAAC,GAAD;AAAK,UAAA,MAAM,EAAE,EAAb;AAAiB,UAAA,SAAS,EAAC,SAA3B;AAAA,kCACI,QAAC,GAAD;AAAK,YAAA,IAAI,EAAE,CAAX;AAAA,mCACI,QAAC,IAAD;AAAM,cAAA,IAAI,EAAC,OAAX;AAAmB,cAAA,KAAK,EAAC,cAAzB;AAAwC,cAAA,QAAQ,EAAE,IAAlD;AAAA,wBACCrB,MAAM,CAACS,QAAQ,CAACsC,cAAV,EAA0B,GAA1B,CAAN,CAAqCC,OAArC;AADD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAMI,QAAC,GAAD;AAAK,YAAA,IAAI,EAAE,CAAX;AAAA,mCACI,QAAC,IAAD;AAAM,cAAA,IAAI,EAAC,OAAX;AAAmB,cAAA,KAAK,EAAC,QAAzB;AAAkC,cAAA,QAAQ,EAAE,IAA5C;AAAA,wBACCvC,QAAQ,CAACwC,IAAT,CAAcC;AADf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBANJ,eAWI,QAAC,GAAD;AAAK,YAAA,IAAI,EAAE,CAAX;AAAA,mCACI,QAAC,IAAD;AAAM,cAAA,IAAI,EAAC,OAAX;AAAmB,cAAA,KAAK,EAAC,OAAzB;AAAiC,cAAA,QAAQ,EAAE,IAA3C;AAAA,wBACCzC,QAAQ,CAAC0C;AADV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAXJ,eAgBI,QAAC,GAAD;AAAK,YAAA,IAAI,EAAE,CAAX;AAAA,mCACI,QAAC,IAAD;AACI,cAAA,IAAI,EAAC,OADT;AAEI,cAAA,KAAK,EAAC,OAFV;AAGI,cAAA,QAAQ,EAAE,IAHd;AAII,cAAA,KAAK,eAAE;AAAM,gBAAA,SAAS,EAAC,WAAhB;AAA4B,gBAAA,OAAO,EAAE,MAAMV,YAAY,EAAvD;AAAA,wCAA2D,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,wBAA3D;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJX;AAAA,wBAKChC,QAAQ,CAAC2C,SAAT,IAAsB3C,QAAQ,CAAC2C;AALhC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBARS,eAkCT,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,kBAAhB;AAAA,iCACI;AAAK,YAAA,uBAAuB,EAAE;AAACC,cAAAA,MAAM,EAAE5C,QAAQ,CAACjB,OAAT,CAAiB8D,OAAjB,CAAyB,oBAAzB,EAA+C,MAA/C;AAAT;AAA9B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAlCS,eAqCT,QAAC,OAAD;AAAS,UAAA,UAAU,EAAE9C,EAArB;AAAyB,UAAA,WAAW,EAAEC,QAAQ,CAAC8C;AAA/C;AAAA;AAAA;AAAA;AAAA,gBArCS;AAAA;AAAA;AAAA;AAAA;AAAA;AADjB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AA8CH,CAxHD;;GAAMhD,Q;UACyBvB,S,EAGXC,U,EAGhBa,Q,EAOyBC,W,EAeAA,W,EAyBCA,W,EAcHA,W;;;KApErBQ,Q;AA0HN,eAAeA,QAAf","sourcesContent":["import { FC, useState, useEffect, useRef } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport Breadcrumb from '../Breadcrumb';\nimport Answers from '../Answers/Answers';\nimport { Card, Row, Col, Modal, message } from 'antd';\nimport { LikeFilled, ExclamationCircleOutlined } from '@ant-design/icons';\nimport { QuestionInterface } from '../../interfaces/QuestionInterface';\nimport IconBar from '../IconBar';\nimport EditQuestion from '../EditQuestion';\nimport { gql, useQuery, useMutation } from '@apollo/client'\nimport moment from 'moment'\n\nconst { confirm } = Modal;\n\nconst FEED_QUESTION_QUERY = gql`\nquery feedQuestionQuery($id: ID!) {\n    feedQuestion(id: $id) {\n        title\n        message\n        submissionTime\n        view\n        voteCount\n        answers {\n            id\n            key\n            author\n            content\n            avatar\n            datetime\n        }\n        user {\n            name\n        }\n    }\n}\n`\n\nconst UPDATE_QUESTION_MUTATION = gql`\nmutation updateQuestionMutation(\n    $id: ID!\n    $title: String!\n    $message: String!) {\n    updateQuestion(id: $id, title: $title, message: $message) {\n        title\n        message\n    }\n}\n`\n\nconst DELETE_QUESTION_MUTATION = gql`\nmutation deleteQuestionMutation($id: ID!){\n    deleteQuestion(id: $id) {\n      id\n    }\n  }\n`\n\nconst ADD_VIEW_MUTATION = gql`\nmutation addViewMutation($questionId: ID!){\n    addView(questionId: $questionId) {\n        view\n    }\n}\n`\n\nconst VOTE_MUTATION = gql`\nmutation voteMutation($questionId: ID!){\n    vote(questionId: $questionId) {\n        id\n        question {\n            voteCount\n        }\n    }\n}\n`\n\nconst Question: FC = () => {\n    const {id}: {id: string} = useParams();\n    const [question, setQuestion] = useState<QuestionInterface>();\n    const [edit, setEdit] = useState(false);\n    const history = useHistory();\n    const viewCounted = useRef(false);\n\n    useQuery(FEED_QUESTION_QUERY, {\n        variables: { id: parseInt(id) },\n        onCompleted: (res) => {\n            setQuestion(res.feedQuestion)\n        }\n    })\n    \n    const [updateQuestion] = useMutation(UPDATE_QUESTION_MUTATION, {\n        onCompleted: (res) => {\n            setQuestion({...question, ...res.updateQuestion})\n            setEdit(false)\n        }\n    })\n\n    const editHandler = (values: any) => {\n        updateQuestion({ variables: {\n            id: id,\n            title: values.title,\n            message: values.message\n        }})\n    }\n\n    const [deleteQuestion] = useMutation(DELETE_QUESTION_MUTATION, {\n        onCompleted: () => history.push('/')\n    })\n\n    const deleteHandler = () => {\n        deleteQuestion({ variables: { id: id } })\n    }\n\n    function showDeleteConfirm() {\n        confirm({\n          title: 'Delete this question?',\n          icon: <ExclamationCircleOutlined />,\n          content: 'Are you sure you want to delete this question?',\n          okText: 'Yes',\n          okType: 'danger',\n          cancelText: 'No',\n          onOk() {\n            deleteHandler();\n          },\n          onCancel() {\n            console.log('Cancel');\n          },\n        });\n      }\n\n    const [addViewMutation] = useMutation(ADD_VIEW_MUTATION, {\n        variables: { questionId: id },\n        onCompleted: (res) => setQuestion({...question, ...res.addView})\n    })\n\n    useEffect(() => {\n        if(!viewCounted.current) {\n            addViewMutation()\n            viewCounted.current = true\n        } else {\n            viewCounted.current = false\n        }\n    }, [addViewMutation])\n\n    const [voteMutation] = useMutation(VOTE_MUTATION, {\n        variables: { questionId: Number(id) },\n        onCompleted: (res) => setQuestion({...question, ...res.vote.question}),\n        onError: (err) => message.error(err.message)\n    })\n\n    return (\n        <>\n            <Breadcrumb locationArray={['Home', 'Question', question ? question.title : '']} />\n            <div className=\"site-layout-content\">  \n                {question && <Card \n                                title={question.title}\n                                className=\"question-card\"\n                                extra={<IconBar \n                                            className=\"question-icon-bar\"\n                                            editHandler={() => setEdit(true)}\n                                            deleteHandler={showDeleteConfirm} />}>\n                    {edit && <EditQuestion question={question} editHandler={editHandler} />}\n                    <Row gutter={16} className=\"details\">\n                        <Col span={6}>\n                            <Card size=\"small\" title=\"Submitted at\" bordered={true}>\n                            {moment(question.submissionTime, \"x\").fromNow()}\n                            </Card>\n                        </Col>\n                        <Col span={6}>\n                            <Card size=\"small\" title=\"Author\" bordered={true}>\n                            {question.user.name}\n                            </Card>\n                        </Col>\n                        <Col span={6}>\n                            <Card size=\"small\" title=\"Views\" bordered={true}>\n                            {question.view}\n                            </Card>\n                        </Col>\n                        <Col span={6}>\n                            <Card \n                                size=\"small\"\n                                title=\"Votes\"\n                                bordered={true}\n                                extra={<span className=\"like-link\" onClick={() => voteMutation()}><LikeFilled />LIKE</span>}>\n                            {question.voteCount && question.voteCount}\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Card className=\"question-message\">\n                        <div dangerouslySetInnerHTML={{__html: question.message.replace(/(\\r\\n|\\n\\r|\\r|\\n)/g, '<br>')}}></div>\n                    </Card>\n                    <Answers questionId={id} answersProp={question.answers} />\n                </Card>}\n            </div>\n        </>\n    )\n}\n\nexport default Question;\n"]},"metadata":{},"sourceType":"module"}