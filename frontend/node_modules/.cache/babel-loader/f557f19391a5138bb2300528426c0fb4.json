{"ast":null,"code":"var _jsxFileName = \"/Users/gergoferenczi/Documents/Kinsta/project/src/components/Answers/Answers.tsx\";\nimport { Comment, Avatar } from 'antd';\nimport React from 'react';\nimport AnswerList from './AnswerList';\nimport Editor from './Editor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Answers extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      answers: [],\n      submitting: false,\n      value: ''\n    };\n\n    this.fetchAnswers = async () => {\n      const res = await fetch(`http://localhost:5000/answers`);\n      const data = await res.json();\n      return data;\n    };\n\n    this.addAnswer = async answer => {\n      const res = await fetch('http://localhost:5000/answers', {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(answer)\n      });\n      const newAnswer = await res.json();\n      this.setState({\n        submitting: false,\n        value: '',\n        answers: [...this.state.answers, newAnswer]\n      });\n      console.log(this.state);\n    };\n\n    this.deleteAnswer = async answerId => {\n      await fetch(`http://localhost:5000/answers/${answerId}`, {\n        method: 'DELETE'\n      });\n      this.setState({\n        submitting: false,\n        value: '',\n        answers: [...this.state.answers.filter(answer => answer.id !== answerId)]\n      });\n    };\n\n    this.handleSubmit = () => {\n      if (!this.state.value) {\n        return;\n      }\n\n      this.setState({\n        submitting: true\n      });\n      setTimeout(() => {\n        this.addAnswer({\n          author: 'Pisti',\n          user_id: 1,\n          question_id: 20,\n          avatar: 'https://i.pravatar.cc/400?img=33',\n          content: this.state.value,\n          datetime: Date()\n        });\n      }, 1000);\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    const getAnswers = async () => {\n      const answers = await this.fetchAnswers();\n      const filteredAnswers = answers.filter(answer => answer.question_id === parseInt(this.props.question_id));\n      this.setState({\n        answers: [...filteredAnswers]\n      });\n    };\n\n    getAnswers();\n  }\n\n  render() {\n    const {\n      answers,\n      submitting,\n      value\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), answers.length > 0 && /*#__PURE__*/_jsxDEV(AnswerList, {\n        answers: answers,\n        deleteHandler: this.deleteAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(Comment, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          src: \"https://i.pravatar.cc/400?img=33\",\n          alt: \"Han Solo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this),\n        content: /*#__PURE__*/_jsxDEV(Editor, {\n          onChange: this.handleChange,\n          onSubmit: this.handleSubmit,\n          submitting: submitting,\n          value: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Answers;","map":{"version":3,"sources":["/Users/gergoferenczi/Documents/Kinsta/project/src/components/Answers/Answers.tsx"],"names":["Comment","Avatar","React","AnswerList","Editor","Answers","Component","state","answers","submitting","value","fetchAnswers","res","fetch","data","json","addAnswer","answer","method","headers","body","JSON","stringify","newAnswer","setState","console","log","deleteAnswer","answerId","filter","id","handleSubmit","setTimeout","author","user_id","question_id","avatar","content","datetime","Date","handleChange","e","target","componentDidMount","getAnswers","filteredAnswers","parseInt","props","render","length"],"mappings":"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","sourcesContent":["import { Comment, Avatar } from 'antd';\nimport React from 'react';\nimport AnswerList from './AnswerList';\nimport Editor from './Editor';\nimport { AnswerInterface } from '../../interfaces/AnswerInterface';\nimport { NewAnswerInterface } from '../../interfaces/NewAnswerInterface';\n\nclass Answers extends React.Component<{question_id: string}> {  \n  state = {\n    answers: [],\n    submitting: false,\n    value: '',\n  };\n\n  fetchAnswers = async () => {\n    const res = await fetch(`http://localhost:5000/answers`);\n    const data = await res.json();\n    return data;\n  }\n\n  addAnswer = async (answer: NewAnswerInterface) => {\n    const res = await fetch('http://localhost:5000/answers',\n      {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(answer)\n      })\n    const newAnswer = await res.json();\n    this.setState({\n      submitting: false,\n      value: '',\n      answers: [...this.state.answers, newAnswer],\n    });\n    console.log(this.state);\n  }\n\n  deleteAnswer = async (answerId: number) => {\n    await fetch(`http://localhost:5000/answers/${answerId}`, {method: 'DELETE'});\n    this.setState({\n      submitting: false,\n      value: '',\n      answers: [...this.state.answers.filter((answer: AnswerInterface) => answer.id !== answerId)],\n    });\n  }\n\n  componentDidMount() {\n      const getAnswers = async () => {\n        const answers = await this.fetchAnswers();\n        const filteredAnswers = answers.filter((answer: NewAnswerInterface) => answer.question_id === parseInt(this.props.question_id));\n        this.setState({ answers: [...filteredAnswers] });\n      }\n      getAnswers();\n  }\n\n  handleSubmit = () => {\n    if (!this.state.value) {\n      return;\n    }\n\n    this.setState({\n      submitting: true,\n    });\n\n    setTimeout(() => {\n      this.addAnswer({\n        author: 'Pisti',\n        user_id: 1,\n        question_id: 20,\n        avatar: 'https://i.pravatar.cc/400?img=33',\n        content: this.state.value,\n        datetime: Date(),\n      })\n    }, 1000);\n  };\n\n  handleChange = (e: { target: { value: string; }; }) => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n\n  render() {\n    const { answers, submitting, value } = this.state;\n\n    return (\n      <div className=\"comment-section\">\n        <h2>Answers</h2>\n        {answers.length > 0 && <AnswerList \n          answers={answers}\n          deleteHandler={this.deleteAnswer} />}\n        <Comment\n          avatar={\n            <Avatar\n              src=\"https://i.pravatar.cc/400?img=33\"\n              alt=\"Han Solo\"\n            />\n          }\n          content={\n            <Editor\n              onChange={this.handleChange}\n              onSubmit={this.handleSubmit}\n              submitting={submitting}\n              value={value}\n            />\n          }\n        />\n      </div>\n    );\n  }\n}\n\nexport default Answers;"]},"metadata":{},"sourceType":"module"}