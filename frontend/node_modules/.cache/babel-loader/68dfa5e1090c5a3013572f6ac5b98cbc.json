{"ast":null,"code":"var _jsxFileName = \"/Users/gergoferenczi/Documents/Kinsta/project/frontend/src/components/routes/AllQuestions/table_columns.tsx\";\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: 'Title',\n  dataIndex: 'title',\n  sorter: {\n    compare: (a, b) => {\n      let x = a.title.toLowerCase();\n      let y = b.title.toLowerCase();\n\n      if (x < y) {\n        return -1;\n      }\n\n      if (x > y) {\n        return 1;\n      }\n\n      return 0;\n    },\n    multiple: 3\n  },\n  render: (title, record) => /*#__PURE__*/_jsxDEV(Link, {\n    to: `/question/${record.id}`,\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 61\n  }, this),\n  width: '550px'\n}, {\n  title: 'Message',\n  dataIndex: 'message',\n  render: msg => msg.length > 500 ? `${msg.substring(0, 500)}...` : msg\n}, {\n  title: 'Submission Time',\n  dataIndex: 'submissionTime',\n  sorter: {\n    compare: (a, b) => {\n      let x = a.submissionTime.toLowerCase();\n      let y = b.submissionTime.toLowerCase();\n\n      if (x < y) {\n        return -1;\n      }\n\n      if (x > y) {\n        return 1;\n      }\n\n      return 0;\n    }\n  },\n  render: timestamp => {\n    console.log(timestamp);\n    return moment(timestamp).fromNow();\n  },\n  width: '215px'\n}, {\n  title: 'View',\n  dataIndex: 'view',\n  sorter: {\n    compare: (a, b) => a.view - b.view\n  }\n}, {\n  title: 'Vote',\n  dataIndex: 'voteCount',\n  sorter: {\n    compare: (a, b) => a.voteCount - b.voteCount\n  }\n}];\nexport default columns;","map":{"version":3,"sources":["/Users/gergoferenczi/Documents/Kinsta/project/frontend/src/components/routes/AllQuestions/table_columns.tsx"],"names":["Link","moment","columns","title","dataIndex","sorter","compare","a","b","x","toLowerCase","y","multiple","render","record","id","width","msg","length","substring","submissionTime","timestamp","console","log","fromNow","view","voteCount"],"mappings":";AAAA,SAASA,IAAT,QAAqB,kBAArB;AAEA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,OAAO,GAAG,CACZ;AACEC,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,SAAS,EAAE,OAFb;AAGEC,EAAAA,MAAM,EAAE;AACJC,IAAAA,OAAO,EAAE,CAACC,CAAD,EAAuBC,CAAvB,KAAgD;AACrD,UAAIC,CAAC,GAAGF,CAAC,CAACJ,KAAF,CAAQO,WAAR,EAAR;AACA,UAAIC,CAAC,GAAGH,CAAC,CAACL,KAAF,CAAQO,WAAR,EAAR;;AACA,UAAID,CAAC,GAAGE,CAAR,EAAW;AAAC,eAAO,CAAC,CAAR;AAAW;;AACvB,UAAIF,CAAC,GAAGE,CAAR,EAAW;AAAC,eAAO,CAAP;AAAU;;AACtB,aAAO,CAAP;AACH,KAPG;AAQJC,IAAAA,QAAQ,EAAE;AARN,GAHV;AAaEC,EAAAA,MAAM,EAAE,CAACV,KAAD,EAAgBW,MAAhB,kBAA8C,QAAC,IAAD;AAAM,IAAA,EAAE,EAAG,aAAYA,MAAM,CAACC,EAAG,EAAjC;AAAA,cAAqCZ;AAArC;AAAA;AAAA;AAAA;AAAA,UAbxD;AAcEa,EAAAA,KAAK,EAAE;AAdT,CADY,EAiBZ;AACEb,EAAAA,KAAK,EAAE,SADT;AAEEC,EAAAA,SAAS,EAAE,SAFb;AAGES,EAAAA,MAAM,EAAGI,GAAD,IAAiBA,GAAG,CAACC,MAAJ,GAAa,GAAb,GAAoB,GAAED,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiB,GAAjB,CAAsB,KAA5C,GAAmDF;AAH9E,CAjBY,EAsBZ;AACEd,EAAAA,KAAK,EAAE,iBADT;AAEEC,EAAAA,SAAS,EAAE,gBAFb;AAGEC,EAAAA,MAAM,EAAE;AACJC,IAAAA,OAAO,EAAE,CAACC,CAAD,EAAuBC,CAAvB,KAAgD;AACrD,UAAIC,CAAC,GAAGF,CAAC,CAACa,cAAF,CAAiBV,WAAjB,EAAR;AACA,UAAIC,CAAC,GAAGH,CAAC,CAACY,cAAF,CAAiBV,WAAjB,EAAR;;AACA,UAAID,CAAC,GAAGE,CAAR,EAAW;AAAC,eAAO,CAAC,CAAR;AAAW;;AACvB,UAAIF,CAAC,GAAGE,CAAR,EAAW;AAAC,eAAO,CAAP;AAAU;;AACtB,aAAO,CAAP;AACH;AAPG,GAHV;AAYEE,EAAAA,MAAM,EAAGQ,SAAD,IAAuB;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,WAAOpB,MAAM,CAACoB,SAAD,CAAN,CAAkBG,OAAlB,EAAP;AACD,GAfH;AAgBER,EAAAA,KAAK,EAAE;AAhBT,CAtBY,EAwCZ;AACEb,EAAAA,KAAK,EAAE,MADT;AAEEC,EAAAA,SAAS,EAAE,MAFb;AAGEC,EAAAA,MAAM,EAAE;AACJC,IAAAA,OAAO,EAAE,CAACC,CAAD,EAAuBC,CAAvB,KAAgDD,CAAC,CAACkB,IAAF,GAASjB,CAAC,CAACiB;AADhE;AAHV,CAxCY,EA+CZ;AACEtB,EAAAA,KAAK,EAAE,MADT;AAEEC,EAAAA,SAAS,EAAE,WAFb;AAGEC,EAAAA,MAAM,EAAE;AACJC,IAAAA,OAAO,EAAE,CAACC,CAAD,EAAuBC,CAAvB,KAAgDD,CAAC,CAACmB,SAAF,GAAclB,CAAC,CAACkB;AADrE;AAHV,CA/CY,CAAhB;AAwDA,eAAexB,OAAf","sourcesContent":["import { Link } from 'react-router-dom';\nimport { QuestionInterface } from '../../../interfaces/QuestionInterface';\nimport moment from 'moment';\n\nconst columns = [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      sorter: {\n          compare: (a: QuestionInterface, b: QuestionInterface) => {\n              let x = a.title.toLowerCase();\n              let y = b.title.toLowerCase();\n              if (x < y) {return -1;}\n              if (x > y) {return 1;}\n              return 0;\n          },\n          multiple: 3,\n      },\n      render: (title: string, record: QuestionInterface) => <Link to={`/question/${record.id}`}>{title}</Link>,\n      width: '550px',\n    },\n    {\n      title: 'Message',\n      dataIndex: 'message',\n      render: (msg: string) => msg.length > 500 ? `${msg.substring(0, 500)}...` : msg\n    },\n    {\n      title: 'Submission Time',\n      dataIndex: 'submissionTime',\n      sorter: {\n          compare: (a: QuestionInterface, b: QuestionInterface) => {\n              let x = a.submissionTime.toLowerCase();\n              let y = b.submissionTime.toLowerCase();\n              if (x < y) {return -1;}\n              if (x > y) {return 1;}\n              return 0;\n          }\n      },\n      render: (timestamp: string) => {\n        console.log(timestamp)\n        return moment(timestamp).fromNow()\n      },\n      width: '215px'\n    },\n    {\n      title: 'View',\n      dataIndex: 'view',\n      sorter: {\n          compare: (a: QuestionInterface, b: QuestionInterface) => a.view - b.view\n      },\n    },\n    {\n      title: 'Vote',\n      dataIndex: 'voteCount',\n      sorter: {\n          compare: (a: QuestionInterface, b: QuestionInterface) => a.voteCount - b.voteCount\n      },\n    },\n  ];\n\nexport default columns;\n"]},"metadata":{},"sourceType":"module"}