{"ast":null,"code":"var _jsxFileName = \"/Users/gergoferenczi/Documents/Kinsta/project/frontend/src/components/Answers/Answers.tsx\",\n    _s = $RefreshSig$();\n\nimport { Comment, Avatar } from 'antd';\nimport { useState } from 'react';\nimport AnswerList from './AnswerList';\nimport Editor from './Editor';\nimport { gql, useMutation } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst POST_ANSWER_MUTATION = gql`\nmutation postAnswerMutation(\n  $questionId: ID!\n  $content: String!\n  $avatar: String!\n){\n  postAnswer(\n    questionId: $questionId,\n    content: $content,\n    avatar: $avatar) {\n      id\n      key\n      author\n      content\n      avatar\n      datetime\n    }\n}\n`; // class Answers extends React.Component<{questionId: string, answers: AnswerInterface[], answersRefetch: Function, mutate: any}> {\n//   state = {\n//     answers: [],\n//     submitting: false,\n//     value: '',\n//   };\n//   deleteAnswer = async (answerId: number) => {\n//     await fetch(`http://localhost:5000/answers/${answerId}`, {method: 'DELETE'});\n//     this.setState({\n//       submitting: false,\n//       value: '',\n//       answers: [...this.state.answers.filter((answer: AnswerInterface) => answer.id !== answerId)],\n//     });\n//   }\n//   componentDidMount() {\n//     this.setState({\n//       ...this.state,\n//       answers: [ ...this.props.answers ]\n//     })\n//   }\n//   handleSubmit = () => {\n//     if (!this.state.value) {\n//       return;\n//     }\n//     this.setState({\n//       submitting: true,\n//     });\n//     setTimeout(() => {\n//       this.props.mutate({\n//         variables: {\n//           questionId: Number(this.props.questionId),\n//           content: this.state.value,\n//           avatar: \"https://i.pravatar.cc/400?img=12\",\n//         }\n//       }).then(() => {\n//         this.props.answersRefetch()\n//       })\n//     }, 1000);\n//   };\n//   handleChange = (e: { target: { value: string; }; }) => {\n//     this.setState({\n//       value: e.target.value,\n//     });\n//   };\n//   render() {\n//     const { answers, submitting, value } = this.state;\n//     return (\n//       <div className=\"comment-section\">\n//         <h2>Answers</h2>\n//         {answers.length > 0 && <AnswerList \n//           answers={answers}\n//           deleteHandler={this.deleteAnswer} />}\n//         <Comment\n//           avatar={\n//             <Avatar\n//               src=\"https://i.pravatar.cc/400?img=33\"\n//               alt=\"Han Solo\"\n//             />\n//           }\n//           content={\n//             <Editor\n//               onChange={this.handleChange}\n//               onSubmit={this.handleSubmit}\n//               submitting={submitting}\n//               value={value}\n//             />\n//           }\n//         />\n//       </div>\n//     );\n//   }\n// }\n\nconst Answers = ({\n  questionId,\n  answers\n}) => {\n  _s();\n\n  const [submitting, setSubmitting] = useState(false);\n  const [value, setValue] = useState(\"\");\n\n  const deleteAnswerHandler = answerId => console.log('delete', answerId);\n\n  const handleChange = e => {\n    setValue(e.target.value);\n  };\n\n  const [postAnswerMutation] = useMutation(POST_ANSWER_MUTATION, {\n    variables: {\n      questionId,\n      content: value,\n      avatar: \"https://i.pravatar.cc/400?img=12\"\n    },\n    onCompleted: newAnswer => {\n      answers = [...answers, newAnswer];\n      setValue(\"\");\n      setSubmitting(false);\n    }\n  });\n\n  const handleSubmit = () => {\n    if (!value) return;\n    setSubmitting(true);\n    setTimeout(() => {\n      postAnswerMutation();\n    }, 1000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), answers.length > 0 && /*#__PURE__*/_jsxDEV(AnswerList, {\n      answers: answers,\n      deleteHandler: deleteAnswerHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(Comment, {\n      avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n        src: \"https://i.pravatar.cc/400?img=33\",\n        alt: \"Han Solo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this),\n      content: /*#__PURE__*/_jsxDEV(Editor, {\n        onChange: handleChange,\n        onSubmit: handleSubmit,\n        submitting: submitting,\n        value: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Answers, \"5av1q5uiMvFpDP22eiYsMPVn4QE=\", false, function () {\n  return [useMutation];\n});\n\n_c = Answers;\nexport default Answers;\n\nvar _c;\n\n$RefreshReg$(_c, \"Answers\");","map":{"version":3,"sources":["/Users/gergoferenczi/Documents/Kinsta/project/frontend/src/components/Answers/Answers.tsx"],"names":["Comment","Avatar","useState","AnswerList","Editor","gql","useMutation","POST_ANSWER_MUTATION","Answers","questionId","answers","submitting","setSubmitting","value","setValue","deleteAnswerHandler","answerId","console","log","handleChange","e","target","postAnswerMutation","variables","content","avatar","onCompleted","newAnswer","handleSubmit","setTimeout","length"],"mappings":";;;AAAA,SAASA,OAAT,EAAkBC,MAAlB,QAAgC,MAAhC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,SAASC,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;;AAEA,MAAMC,oBAAoB,GAAGF,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBA,C,CAoBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA,MAAMG,OAAO,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA;AAAb,CAAD,KAAsC;AAAA;;AACpD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMa,mBAAmB,GAAIC,QAAD,IAAsBC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,QAAtB,CAAlD;;AAEA,QAAMG,YAAY,GAAIC,CAAD,IAAwC;AAC3DN,IAAAA,QAAQ,CAACM,CAAC,CAACC,MAAF,CAASR,KAAV,CAAR;AACD,GAFD;;AAIA,QAAM,CAACS,kBAAD,IAAuBhB,WAAW,CAACC,oBAAD,EAAuB;AAC7DgB,IAAAA,SAAS,EAAE;AACTd,MAAAA,UADS;AAETe,MAAAA,OAAO,EAAEX,KAFA;AAGTY,MAAAA,MAAM,EAAE;AAHC,KADkD;AAM7DC,IAAAA,WAAW,EAAGC,SAAD,IAAgC;AAC3CjB,MAAAA,OAAO,GAAG,CAAC,GAAGA,OAAJ,EAAaiB,SAAb,CAAV;AACAb,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAF,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AAV4D,GAAvB,CAAxC;;AAaA,QAAMgB,YAAY,GAAG,MAAM;AACzB,QAAG,CAACf,KAAJ,EACE;AAEFD,IAAAA,aAAa,CAAC,IAAD,CAAb;AAEAiB,IAAAA,UAAU,CAAC,MAAM;AACfP,MAAAA,kBAAkB;AACnB,KAFS,EAEP,IAFO,CAAV;AAGD,GATD;;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGZ,OAAO,CAACoB,MAAR,GAAiB,CAAjB,iBAAsB,QAAC,UAAD;AACrB,MAAA,OAAO,EAAEpB,OADY;AAErB,MAAA,aAAa,EAAEK;AAFM;AAAA;AAAA;AAAA;AAAA,YAFzB,eAKE,QAAC,OAAD;AACE,MAAA,MAAM,eACJ,QAAC,MAAD;AACE,QAAA,GAAG,EAAC,kCADN;AAEE,QAAA,GAAG,EAAC;AAFN;AAAA;AAAA;AAAA;AAAA,cAFJ;AAOE,MAAA,OAAO,eACL,QAAC,MAAD;AACE,QAAA,QAAQ,EAAEI,YADZ;AAEE,QAAA,QAAQ,EAAES,YAFZ;AAGE,QAAA,UAAU,EAAEjB,UAHd;AAIE,QAAA,KAAK,EAAEE;AAJT;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CA1DD;;GAAML,O;UAUyBF,W;;;KAVzBE,O;AA4DN,eAAeA,OAAf","sourcesContent":["import { Comment, Avatar } from 'antd';\nimport { useState } from 'react';\nimport AnswerList from './AnswerList';\nimport Editor from './Editor';\nimport { AnswerInterface } from '../../interfaces/AnswerInterface';\nimport { gql, useMutation } from '@apollo/client'\n\nconst POST_ANSWER_MUTATION = gql`\nmutation postAnswerMutation(\n  $questionId: ID!\n  $content: String!\n  $avatar: String!\n){\n  postAnswer(\n    questionId: $questionId,\n    content: $content,\n    avatar: $avatar) {\n      id\n      key\n      author\n      content\n      avatar\n      datetime\n    }\n}\n`\n\n// class Answers extends React.Component<{questionId: string, answers: AnswerInterface[], answersRefetch: Function, mutate: any}> {\n//   state = {\n//     answers: [],\n//     submitting: false,\n//     value: '',\n//   };\n\n//   deleteAnswer = async (answerId: number) => {\n//     await fetch(`http://localhost:5000/answers/${answerId}`, {method: 'DELETE'});\n//     this.setState({\n//       submitting: false,\n//       value: '',\n//       answers: [...this.state.answers.filter((answer: AnswerInterface) => answer.id !== answerId)],\n//     });\n//   }\n\n//   componentDidMount() {\n//     this.setState({\n//       ...this.state,\n//       answers: [ ...this.props.answers ]\n//     })\n//   }\n\n\n//   handleSubmit = () => {\n//     if (!this.state.value) {\n//       return;\n//     }\n\n//     this.setState({\n//       submitting: true,\n//     });\n\n//     setTimeout(() => {\n//       this.props.mutate({\n//         variables: {\n//           questionId: Number(this.props.questionId),\n//           content: this.state.value,\n//           avatar: \"https://i.pravatar.cc/400?img=12\",\n//         }\n//       }).then(() => {\n//         this.props.answersRefetch()\n//       })\n//     }, 1000);\n//   };\n\n//   handleChange = (e: { target: { value: string; }; }) => {\n//     this.setState({\n//       value: e.target.value,\n//     });\n//   };\n\n//   render() {\n//     const { answers, submitting, value } = this.state;\n\n//     return (\n//       <div className=\"comment-section\">\n//         <h2>Answers</h2>\n//         {answers.length > 0 && <AnswerList \n//           answers={answers}\n//           deleteHandler={this.deleteAnswer} />}\n//         <Comment\n//           avatar={\n//             <Avatar\n//               src=\"https://i.pravatar.cc/400?img=33\"\n//               alt=\"Han Solo\"\n//             />\n//           }\n//           content={\n//             <Editor\n//               onChange={this.handleChange}\n//               onSubmit={this.handleSubmit}\n//               submitting={submitting}\n//               value={value}\n//             />\n//           }\n//         />\n//       </div>\n//     );\n//   }\n// }\n\ntype propTypes = {\n  questionId: string,\n  answers: AnswerInterface[],\n}\n\nconst Answers = ({questionId, answers}: propTypes) => {\n  const [submitting, setSubmitting] = useState(false)\n  const [value, setValue] = useState(\"\")\n\n  const deleteAnswerHandler = (answerId: number) => console.log('delete', answerId)\n\n  const handleChange = (e: { target: { value: string; }; }) => {\n    setValue(e.target.value)\n  }\n\n  const [postAnswerMutation] = useMutation(POST_ANSWER_MUTATION, {\n    variables: {\n      questionId,\n      content: value,\n      avatar: \"https://i.pravatar.cc/400?img=12\",\n    },\n    onCompleted: (newAnswer: AnswerInterface) => {\n      answers = [...answers, newAnswer]\n      setValue(\"\")\n      setSubmitting(false)\n    }\n  })\n\n  const handleSubmit = () => {\n    if(!value)\n      return\n    \n    setSubmitting(true)\n\n    setTimeout(() => {\n      postAnswerMutation()\n    }, 1000)\n  }\n\n  return (\n    <div className=\"comment-section\">\n      <h2>Answers</h2>\n      {answers.length > 0 && <AnswerList \n        answers={answers}\n        deleteHandler={deleteAnswerHandler} />}\n      <Comment\n        avatar={\n          <Avatar\n            src=\"https://i.pravatar.cc/400?img=33\"\n            alt=\"Han Solo\"\n          />\n        }\n        content={\n          <Editor\n            onChange={handleChange}\n            onSubmit={handleSubmit}\n            submitting={submitting}\n            value={value}\n          />\n        }\n      />\n    </div>\n  );\n}\n\nexport default Answers;"]},"metadata":{},"sourceType":"module"}