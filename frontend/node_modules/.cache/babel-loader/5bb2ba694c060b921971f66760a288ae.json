{"ast":null,"code":"var _jsxFileName = \"/Users/gergoferenczi/Documents/Kinsta/project/frontend/src/components/Answers/Answers.tsx\";\nimport { Comment, Avatar } from 'antd';\nimport React from 'react';\nimport AnswerList from './AnswerList';\nimport Editor from './Editor';\nimport { gql, graphql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst POST_ANSWER_MUTATION = gql`\nmutation postAnswerMutation(\n  $questionId: ID!\n  $content: String!\n  $avatar: String!\n){\n  postAnswer(\n    questionId: $questionId,\n    content: $content,\n    avatar: $avatar) {\n      id\n    }\n}\n`;\n\nclass Answers extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      answers: [],\n      submitting: false,\n      value: ''\n    };\n\n    this.deleteAnswer = async answerId => {\n      await fetch(`http://localhost:5000/answers/${answerId}`, {\n        method: 'DELETE'\n      });\n      this.setState({\n        submitting: false,\n        value: '',\n        answers: [...this.state.answers.filter(answer => answer.id !== answerId)]\n      });\n    };\n\n    this.handleSubmit = () => {\n      if (!this.state.value) {\n        return;\n      }\n\n      this.setState({\n        submitting: true\n      });\n      setTimeout(() => {\n        this.props.mutate({\n          variables: {\n            questionId: Number(this.props.questionId),\n            content: this.state.value,\n            avatar: \"https://i.pravatar.cc/400?img=12\"\n          }\n        }).then(() => {\n          this.props.answersRefetch();\n        });\n      }, 1000);\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ ...this.state,\n      answers: [...this.props.answers]\n    });\n  }\n\n  render() {\n    const {\n      answers,\n      submitting,\n      value\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), answers.length > 0 && /*#__PURE__*/_jsxDEV(AnswerList, {\n        answers: answers,\n        deleteHandler: this.deleteAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(Comment, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          src: \"https://i.pravatar.cc/400?img=33\",\n          alt: \"Han Solo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this),\n        content: /*#__PURE__*/_jsxDEV(Editor, {\n          onChange: this.handleChange,\n          onSubmit: this.handleSubmit,\n          submitting: submitting,\n          value: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst answersToRender = graphql(POST_ANSWER_MUTATION)(Answers);\nexport default answersToRender;","map":{"version":3,"sources":["/Users/gergoferenczi/Documents/Kinsta/project/frontend/src/components/Answers/Answers.tsx"],"names":["Comment","Avatar","React","AnswerList","Editor","gql","graphql","POST_ANSWER_MUTATION","Answers","Component","state","answers","submitting","value","deleteAnswer","answerId","fetch","method","setState","filter","answer","id","handleSubmit","setTimeout","props","mutate","variables","questionId","Number","content","avatar","then","answersRefetch","handleChange","e","target","componentDidMount","render","length","answersToRender"],"mappings":"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","sourcesContent":["import { Comment, Avatar } from 'antd';\nimport React from 'react';\nimport AnswerList from './AnswerList';\nimport Editor from './Editor';\nimport { AnswerInterface } from '../../interfaces/AnswerInterface';\nimport { gql, graphql } from '@apollo/client'\n\nconst POST_ANSWER_MUTATION = gql`\nmutation postAnswerMutation(\n  $questionId: ID!\n  $content: String!\n  $avatar: String!\n){\n  postAnswer(\n    questionId: $questionId,\n    content: $content,\n    avatar: $avatar) {\n      id\n    }\n}\n`\n\nclass Answers extends React.Component<{questionId: string, answers: AnswerInterface[], answersRefetch: Function, mutate: any}> {\n  state = {\n    answers: [],\n    submitting: false,\n    value: '',\n  };\n\n  deleteAnswer = async (answerId: number) => {\n    await fetch(`http://localhost:5000/answers/${answerId}`, {method: 'DELETE'});\n    this.setState({\n      submitting: false,\n      value: '',\n      answers: [...this.state.answers.filter((answer: AnswerInterface) => answer.id !== answerId)],\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      ...this.state,\n      answers: [ ...this.props.answers ]\n    })\n  }\n\n\n  handleSubmit = () => {\n    if (!this.state.value) {\n      return;\n    }\n\n    this.setState({\n      submitting: true,\n    });\n\n    setTimeout(() => {\n      this.props.mutate({\n        variables: {\n          questionId: Number(this.props.questionId),\n          content: this.state.value,\n          avatar: \"https://i.pravatar.cc/400?img=12\",\n        }\n      }).then(() => {\n        this.props.answersRefetch()\n      })\n    }, 1000);\n  };\n\n  handleChange = (e: { target: { value: string; }; }) => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n\n  render() {\n    const { answers, submitting, value } = this.state;\n\n    return (\n      <div className=\"comment-section\">\n        <h2>Answers</h2>\n        {answers.length > 0 && <AnswerList \n          answers={answers}\n          deleteHandler={this.deleteAnswer} />}\n        <Comment\n          avatar={\n            <Avatar\n              src=\"https://i.pravatar.cc/400?img=33\"\n              alt=\"Han Solo\"\n            />\n          }\n          content={\n            <Editor\n              onChange={this.handleChange}\n              onSubmit={this.handleSubmit}\n              submitting={submitting}\n              value={value}\n            />\n          }\n        />\n      </div>\n    );\n  }\n}\n\nconst answersToRender = graphql(POST_ANSWER_MUTATION)(Answers)\n\nexport default answersToRender;"]},"metadata":{},"sourceType":"module"}